// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: cmd/api/protos/tracker-api.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrackerAPIClient is the client API for TrackerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackerAPIClient interface {
	// CreateLog adds the given mood.
	CreateLog(ctx context.Context, in *DailyLog, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type trackerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackerAPIClient(cc grpc.ClientConnInterface) TrackerAPIClient {
	return &trackerAPIClient{cc}
}

func (c *trackerAPIClient) CreateLog(ctx context.Context, in *DailyLog, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tracker.TrackerAPI/CreateLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackerAPIServer is the server API for TrackerAPI service.
// All implementations must embed UnimplementedTrackerAPIServer
// for forward compatibility
type TrackerAPIServer interface {
	// CreateLog adds the given mood.
	CreateLog(context.Context, *DailyLog) (*emptypb.Empty, error)
	mustEmbedUnimplementedTrackerAPIServer()
}

// UnimplementedTrackerAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTrackerAPIServer struct {
}

func (UnimplementedTrackerAPIServer) CreateLog(context.Context, *DailyLog) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLog not implemented")
}
func (UnimplementedTrackerAPIServer) mustEmbedUnimplementedTrackerAPIServer() {}

// UnsafeTrackerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackerAPIServer will
// result in compilation errors.
type UnsafeTrackerAPIServer interface {
	mustEmbedUnimplementedTrackerAPIServer()
}

func RegisterTrackerAPIServer(s grpc.ServiceRegistrar, srv TrackerAPIServer) {
	s.RegisterService(&TrackerAPI_ServiceDesc, srv)
}

func _TrackerAPI_CreateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerAPIServer).CreateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracker.TrackerAPI/CreateLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerAPIServer).CreateLog(ctx, req.(*DailyLog))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackerAPI_ServiceDesc is the grpc.ServiceDesc for TrackerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracker.TrackerAPI",
	HandlerType: (*TrackerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLog",
			Handler:    _TrackerAPI_CreateLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/api/protos/tracker-api.proto",
}
